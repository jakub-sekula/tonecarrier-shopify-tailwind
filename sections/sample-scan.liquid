{{ 'section-rich-text.css' | asset_url | stylesheet_tag }}

{% assign block_count = 0 %}
{% for block in section.blocks %}
  {% assign block_count = forloop.index %}
{% endfor %}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  .swiper {
    overflow: visible
  }


  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
    .scan-zoom-container > img {
      max-width: 100%;
      cursor: zoom-in
    }

    .scan-zoom-container > img.zoomed-in {
      cursor: zoom-out
    }

    .sample-height {
      max-height: {{ section.settings.content_height }}px
    }
  }
{%- endstyle -%}


<section style="padding-left: 0; padding-right: 0" class="isolate tw-overflow-hidden section-{{ section.id }} section-{{ section.id }}-padding color-{{ section.settings.color_scheme }}">
  <div style="padding-bottom: {{section.settings.padding_bottom}}px" class="tw-mx-auto  rich-text__wrapper rich-text__wrapper--{{ section.settings.desktop_content_position }}{% if section.settings.full_width %} page-width{% endif %}">
    <div class="rich-text__blocks {{ section.settings.content_alignment }}">
      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when 'heading' -%}
            <h2
              class="rich-text__heading rte inline-richtext {{ block.settings.heading_size }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
              {{ block.shopify_attributes }}
              {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
              {% endif %}>
              {{ block.settings.heading }}
            </h2>
          {%- when 'caption' -%}
            <p
              class="rich-text__caption {{ block.settings.text_style }} {{ block.settings.text_style }}--{{ block.settings.text_size }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
              {{ block.shopify_attributes }}
              {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
              {% endif %}>
              {{ block.settings.caption | escape }}
            </p>
          {%- when 'text' -%}
            <div
              class="rich-text__text rte{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
              {{ block.shopify_attributes }}
              {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
              {% endif %}>
              {{ block.settings.text }}
            </div>
          {%- when 'button' -%}
            <div
              class="rich-text__buttons{% if block.settings.button_label != blank and block.settings.button_label_2 != blank %} rich-text__buttons--multiple{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
              {{ block.shopify_attributes }}
              {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
              {% endif %}>
              {%- if block.settings.button_label != blank -%}
                <a
                  {% if block.settings.button_link == blank %}
                  role="link"
                  aria-disabled="true"
                  {% else %}
                  href="{{ block.settings.button_link }}"
                  {% endif %}
                  class="button{% if block.settings.button_style_secondary %} button--secondary{% else %} button--primary{% endif %}">
                  {{- block.settings.button_label | escape -}}
                </a>
              {%- endif -%}
              {%- if block.settings.button_label_2 != blank -%}
                <a
                  {% if block.settings.button_link_2 == blank %}
                  role="link"
                  aria-disabled="true"
                  {% else %}
                  href="{{ block.settings.button_link_2 }}"
                  {% endif %}
                  class="button{% if block.settings.button_style_secondary_2 %} button--secondary{% else %} button--primary{% endif %}">
                  {{- block.settings.button_label_2 | escape -}}
                </a>
              {%- endif -%}
            </div>
        {%- endcase -%}
      {%- endfor -%}
    </div>
  </div>
  <div class="tw-h-full tw-aspect-video tw-mx-auto tw-relative sample-height">
    <div class="tw-w-full tw-gap-6 tw-px-6 tw-justify-center md:tw-hidden tw-flex tw-mb-6">
      <button
        id="prev-slide"
        class="tw-grid tw-place-items-center tw-size-16 tw-bg-neutral-200 tw-text-black tw-rounded-full"
        aria-label="previous">
        {{ 'lucide-chevron-left.svg' | inline_asset_content }}
      </button>
      <button
        id="next-slide"
        class="tw-grid tw-place-items-center tw-size-16 tw-bg-neutral-200 tw-text-black tw-rounded-full"
        aria-label="next">
        {{ 'lucide-chevron-right.svg' | inline_asset_content }}
      </button>
    </div>
    <swiper-container
      id="main-swiper"
      init="false"
      class="tw-w-full md:tw-h-full">
      {% for i in (1..4) %}
        {% for block in section.blocks %}
          {% if block.type == "Image" %}
            <swiper-slide>
              <div class="scan-zoom-container tw-overflow-hidden tw-w-full tw-h-full tw-relative">
                {% unless block.settings.camera == blank and block.settings.lens == blank and block.settings.light_source == blank and block.settings.converted_with == blank and block.settings.film_stock == blank %}
                  <div class="tw-opacity-100 hover:tw-opacity-0 tw-transition-opacity tw-duration-300 tw-z-10 tw-hidden tw-text-white md:tw-flex tw-flex-col tw-gap-2 tw-absolute tw-left-4 tw-top-4 tw-bg-black/40 tw-backdrop-blur-md tw-p-6">
                    {% if block.settings.camera != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Camera</span>
                        <span>{{ block.settings.camera }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.lens != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Lens</span>
                        <span>{{ block.settings.lens }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.light_source != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Light source</span>
                        <span>{{ block.settings.light_source }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.converted_with != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Converted with</span>
                        <span>{{ block.settings.converted_with }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.film_stock != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Film stock</span>
                        <span>{{ block.settings.film_stock }}</span>
                      </div>
                    {% endif %}

                  </div>
                {% endunless %}
                <img
                  srcset="{{ block.settings.sample_scan_image | image_url: width: 800 }} 1x, {{ block.settings.sample_scan_image | image_url: width: 3840 }} 4x"
                  sizes="100px"
                  class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
              </div>
              <div class="md:tw-hidden tw-p-6 tw-pb-0">
                {% unless block.settings.camera == blank and block.settings.lens == blank and block.settings.light_source == blank and block.settings.converted_with == blank and block.settings.film_stock == blank %}
                  <div class="tw-z-10 tw-grid tw-grid-cols-2 tw-gap-x-2 tw-gap-y-4">
                    {% if block.settings.camera != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Camera</span>
                        <span>{{ block.settings.camera }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.lens != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Lens</span>
                        <span>{{ block.settings.lens }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.light_source != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Light source</span>
                        <span>{{ block.settings.light_source }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.converted_with != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Converted with</span>
                        <span>{{ block.settings.converted_with }}</span>
                      </div>
                    {% endif %}
                    {% if block.settings.film_stock != blank %}
                      <div class="tw-flex tw-flex-col tw-gap-1">
                        <span class="tw-uppercase tw-text-xs tw-font-bold">Film stock</span>
                        <span>{{ block.settings.film_stock }}</span>
                      </div>
                    {% endif %}

                  </div>
                {% endunless %}
              </div>
            </swiper-slide>
          {%- endif -%}

        {%- endfor -%}
      {%- endfor -%}
    </swiper-container>
    <button
      id="prev-slide"
      class="tw-hidden md:tw-grid tw-place-items-center tw-absolute tw-top-1/2 -tw-left-8 -tw-translate-x-full tw-size-16 tw-bg-neutral-200 tw-text-black tw-rounded-full"
      aria-label="previous">
      {{ 'lucide-chevron-left.svg' | inline_asset_content }}
    </button>
    <button
      id="next-slide"
      class="tw-hidden md:tw-grid tw-place-items-center tw-absolute tw-top-1/2 -tw-right-8 tw-translate-x-full tw-size-16 tw-bg-neutral-200 tw-text-black tw-rounded-full"
      aria-label="next">
      {{ 'lucide-chevron-right.svg' | inline_asset_content }}
    </button>

  </div>
</section>


<script>
  const containers = document.querySelectorAll(".scan-zoom-container");

  containers.forEach((container) => {
    const img = container.querySelector("img");

    let isZooming = false;
    let scale = 1;
    let targetScale = 1;
    let x = 0, y = 0;
    let startTime;
    let duration = 500; // Transition duration in milliseconds (adjustable)
    let animationFrameId;
    let isZoomedIn = false; // Track whether the image is zoomed in or not

    // Default sizes for the image (small image when not zoomed)
    const defaultSizes = "100px";

    // High-res sizes (large image when zoomed)
    const highResSizes = "3840px";

    // Set the default sizes initially
    img.sizes = defaultSizes;

    // Cubic bezier function for (.17, .67, .83, .67)
    function cubicBezier(t, p0, p1, p2, p3) {
      const u = 1 - t;
      return (3 * u * u * t * p1) + (3 * u * t * t * p2) + (t * t * t * p3);
    }

    // Function to apply cubic-bezier(.17, .67, .83, .67) easing
    function applyCubicBezierEaseOut(t) {
      return cubicBezier(t, 0.17, 0.67, 0.83, 0.67);
    }

  // Function to update transform origin based on mouse or touch position
  function updateTransformOrigin(e) {
  const rect = container.getBoundingClientRect();

  // Check if the event is a touch event
  if (e.touches) {
    // Use touch positions for mobile
    x = e.touches[0].X - rect.left;
    y = e.touches[0].Y - rect.top;
  } else {
    // Use mouse positions for desktop
    x = e.clientX - rect.left;
    y = e.clientY - rect.top;
  }

  // Update the transform origin based on calculated x, y
  img.style.transformOrigin = `${x}px ${y}px`;
  }

    // Mouse move event to track cursor when hovering over the container
    container.addEventListener("mousemove", (e) => {
      updateTransformOrigin(e); // Always track mouse movement, even when not zoomed
    });

    // Click event to toggle zoom
    container.addEventListener("click", () => {
      if (isZoomedIn) {
        // If already zoomed in, click to unzoom
        targetScale = 1;
        img.sizes = defaultSizes; // Switch back to low-res
        img.classList.remove("zoomed-in");
        isZoomedIn = false;
      } else {
        // Zoom in on first click
        targetScale = 3; // Zoom scale factor
        img.sizes = highResSizes; // Use high-res image
        img.classList.add("zoomed-in");
        isZoomedIn = true;
      }

      if (!isZooming) {
        isZooming = true;
        startTime = null;
        requestAnimationFrame(animateZoom);
      }
    });

    function animateZoom(timestamp) {
      if (!startTime) startTime = timestamp;

      // Calculate the progress of the animation based on the target duration
      const elapsed = timestamp - startTime;
      let progress = Math.min(elapsed / duration, 1); // Clamp progress between 0 and 1

      // Apply cubic bezier easing to the progress
      let easedProgress = applyCubicBezierEaseOut(progress);

      // Calculate new scale based on easing
      scale = scale + (targetScale - scale) * easedProgress;

      img.style.transform = `scale(${scale})`;

      // Continue animation if the progress is less than 1 (i.e., the animation hasn't completed)
      if (progress < 1) {
        animationFrameId = requestAnimationFrame(animateZoom);
      } else {
        scale = targetScale; // Ensure final scale matches target
        img.style.transform = `scale(${scale})`;
        isZooming = false;
      }
    }
  });
</script>


<script>
  const swiper = document.querySelector("#main-swiper")
  const swiperParams = {
    slidesPerView: 1,
    spaceBetween: 128,
    loop:true,
    navigation: {
        nextEl: "#next-slide",
        prevEl: "#prev-slide",
      },
      keyboard: {
    enabled: true,
    onlyInViewport: true,
    lazyPreloadPrevNext: 5,
  },
    injectStyles: [
      `
      .swiper {
       overflow: visible;
      }
      `,
    ],
  };

  Object.assign(swiper, swiperParams);
  document.addEventListener("DOMContentLoaded", ()=> {
    swiper.initialize();
  })
</script>


{% schema %}
  {
    "name": "Sample scan",
    "tag": "section",
    "class": "section",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "select",
        "id": "content_alignment",
        "options": [
          {
            "value": "left",
            "label": "t:sections.rich-text.settings.content_alignment.options__1.label"
          },
          {
            "value": "center",
            "label": "t:sections.rich-text.settings.content_alignment.options__2.label"
          },
          {
            "value": "right",
            "label": "t:sections.rich-text.settings.content_alignment.options__3.label"
          }
        ],
        "default": "center",
        "label": "t:sections.rich-text.settings.content_alignment.label"
      },
      {
        "type": "color",
        "id": "background_color",
        "label": "Background color"
      },
      {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      },
      {
        "type": "range",
        "id": "content_height",
        "min": 0,
        "max": 1000,
        "step": 50,
        "unit": "px",
        "label": "Content height",
        "default": 400
      }
    ],
    "blocks": [
      {
        "type": "Image",
        "name": "image",
        "limit": 5,
        "settings": [
          {
            "type": "image_picker",
            "id": "sample_scan_image",
            "label": "Sample scan image"
          },
          {
            "type": "image_picker",
            "id": "sample_scan_negative",
            "label": "Sample scan negative"
          },
          {
            "type": "text",
            "id": "camera",
            "label": "Camera"
          },
          {
            "type": "text",
            "id": "lens",
            "label": "Lens"
          },
          {
            "type": "text",
            "id": "light_source",
            "label": "Light source"
          },
          {
            "type": "text",
            "id": "converted_with",
            "label": "Converted with"
          },
          {
            "type": "text",
            "id": "film_stock",
            "label": "Film stock"
          },
          {
            "type": "url",
            "id": "raw_download_url",
            "label": "Raw download URL"
          }
        ]
      },
      {
        "type": "heading",
        "name": "t:sections.rich-text.blocks.heading.name",
        "limit": 3,
        "settings": [
          {
            "type": "inline_richtext",
            "id": "heading",
            "default": "Talk about your brand",
            "label": "t:sections.rich-text.blocks.heading.settings.heading.label"
          },
          {
            "type": "select",
            "id": "heading_size",
            "options": [
              {
                "value": "h2",
                "label": "t:sections.all.heading_size.options__1.label"
              },
              {
                "value": "h1",
                "label": "t:sections.all.heading_size.options__2.label"
              },
              {
                "value": "h0",
                "label": "t:sections.all.heading_size.options__3.label"
              },
              {
                "value": "hxl",
                "label": "t:sections.all.heading_size.options__4.label"
              }
            ],
            "default": "h1",
            "label": "t:sections.all.heading_size.label"
          }
        ]
      },
      {
        "type": "caption",
        "name": "t:sections.rich-text.blocks.caption.name",
        "limit": 3,
        "settings": [
          {
            "type": "text",
            "id": "caption",
            "default": "Add a tagline",
            "label": "t:sections.rich-text.blocks.caption.settings.text.label"
          },
          {
            "type": "select",
            "id": "text_style",
            "options": [
              {
                "value": "subtitle",
                "label": "t:sections.rich-text.blocks.caption.settings.text_style.options__1.label"
              },
              {
                "value": "caption-with-letter-spacing",
                "label": "t:sections.rich-text.blocks.caption.settings.text_style.options__2.label"
              }
            ],
            "default": "caption-with-letter-spacing",
            "label": "t:sections.rich-text.blocks.caption.settings.text_style.label"
          },
          {
            "type": "select",
            "id": "text_size",
            "options": [
              {
                "value": "small",
                "label": "t:sections.rich-text.blocks.caption.settings.caption_size.options__1.label"
              },
              {
                "value": "medium",
                "label": "t:sections.rich-text.blocks.caption.settings.caption_size.options__2.label"
              },
              {
                "value": "large",
                "label": "t:sections.rich-text.blocks.caption.settings.caption_size.options__3.label"
              }
            ],
            "default": "medium",
            "label": "t:sections.rich-text.blocks.caption.settings.caption_size.label"
          }
        ]
      },
      {
        "type": "text",
        "name": "t:sections.rich-text.blocks.text.name",
        "limit": 3,
        "settings": [
          {
            "type": "richtext",
            "id": "text",
            "default": "<p>Share information about your brand with your customers. Describe a product, make announcements, or welcome customers to your store.</p>",
            "label": "t:sections.rich-text.blocks.text.settings.text.label"
          }
        ]
      },
      {
        "type": "button",
        "name": "t:sections.rich-text.blocks.buttons.name",
        "limit": 2,
        "settings": [
          {
            "type": "text",
            "id": "button_label",
            "default": "Button label",
            "label": "t:sections.rich-text.blocks.buttons.settings.button_label_1.label",
            "info": "t:sections.rich-text.blocks.buttons.settings.button_label_1.info"
          },
          {
            "type": "url",
            "id": "button_link",
            "label": "t:sections.rich-text.blocks.buttons.settings.button_link_1.label"
          },
          {
            "type": "checkbox",
            "id": "button_style_secondary",
            "default": false,
            "label": "t:sections.rich-text.blocks.buttons.settings.button_style_secondary_1.label"
          },
          {
            "type": "text",
            "id": "button_label_2",
            "label": "t:sections.rich-text.blocks.buttons.settings.button_label_2.label",
            "info": "t:sections.rich-text.blocks.buttons.settings.button_label_2.info"
          },
          {
            "type": "url",
            "id": "button_link_2",
            "label": "t:sections.rich-text.blocks.buttons.settings.button_link_2.label"
          },
          {
            "type": "checkbox",
            "id": "button_style_secondary_2",
            "default": false,
            "label": "t:sections.rich-text.blocks.buttons.settings.button_style_secondary_2.label"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Sample scans",
        "settings": {}
      }
    ]
  }
{% endschema %}