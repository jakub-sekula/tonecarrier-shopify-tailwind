{{ 'section-rich-text.css' | asset_url | stylesheet_tag }}
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js"></script>
<script src="https://unpkg.com/lucide@latest"></script>

{% assign block_count = 0 %}
{% for block in section.blocks %}
  {% assign block_count = forloop.index %}
{% endfor %}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  .swiper {
    overflow: visible
  }


  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
    .scan-zoom-container > img {
      max-width: 100%;
      cursor: zoom-in
    }

    .scan-zoom-container > img.zoomed-in {
      cursor: zoom-out
    }
  }
{%- endstyle -%}


<div style="padding-left: 0; padding-right: 0" class="isolate{% unless section.settings.full_width %} page-width{% endunless %} section-{{ section.id }}-padding">
  <div style="max-height: {{section.settings.content_height}}px" class="tw-h-full tw-aspect-[3/2] tw-mx-auto tw-relative ">
    <swiper-container
      id="main-swiper"
      init="false"
      class="tw-w-full tw-aspect-[3/2]">
      {% for block in section.blocks %}
        <swiper-slide>
          <div class="scan-zoom-container tw-overflow-hidden tw-w-full tw-h-full tw-relative">
            {% unless block.settings.camera == null and block.settings.lens == null and block.settings.light_source == null and block.settings.converted_with == null %}
              <div class="tw-z-10 tw-hidden tw-text-white md:tw-flex tw-flex-col tw-gap-2 tw-absolute tw-left-4 tw-top-4 tw-bg-black/40 tw-backdrop-blur-md tw-p-6">
                {% if block.settings.camera != null %}
                  <div class="tw-flex tw-flex-col tw-gap-1">
                    <span class="tw-uppercase tw-text-xs tw-font-bold">Camera</span>
                    <span>{{ block.settings.camera }}</span>
                  </div>
                {% endif %}
                {% if block.settings.lens != null %}
                  <div class="tw-flex tw-flex-col tw-gap-1">
                    <span class="tw-uppercase tw-text-xs tw-font-bold">Lens</span>
                    <span>{{ block.settings.lens }}</span>
                  </div>
                {% endif %}
                {% if block.settings.light_source != null %}
                  <div class="tw-flex tw-flex-col tw-gap-1">
                    <span class="tw-uppercase tw-text-xs tw-font-bold">Light source</span>
                    <span>{{ block.settings.light_source }}</span>
                  </div>
                {% endif %}
                {% if block.settings.converted_with != null %}
                  <div class="tw-flex tw-flex-col tw-gap-1">
                    <span class="tw-uppercase tw-text-xs tw-font-bold">Converted with</span>
                    <span>{{ block.settings.converted_with }}</span>
                  </div>
                {% endif %}

              </div>
            {% endunless %}
            <img
              srcset="{{ block.settings.sample_scan_image | image_url: width: 800 }} 1x, {{ block.settings.sample_scan_image | image_url: width: 3840 }} 4x"
              sizes="100px"
              class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
          </div>
        </swiper-slide>
      {%- endfor -%}
    </swiper-container>
    <button
      id="prev-slide"
      class="tw-hidden md:tw-grid tw-place-items-center tw-absolute tw-top-1/2 -tw-left-8 -tw-translate-x-full tw-size-16 tw-bg-neutral-200 tw-rounded-full"
      aria-label="previous">
      <i data-lucide="chevron-left" class="tw-size-8"></i>
    </button>
    <button
      id="next-slide"
      class="tw-hidden md:tw-grid tw-place-items-center tw-absolute tw-top-1/2 -tw-right-8 tw-translate-x-full tw-size-16 tw-bg-neutral-200 tw-rounded-full"
      aria-label="next">
      <i data-lucide="chevron-right" class="tw-size-8"></i>
    </button>
  </div>
</div>


<script>
  const containers = document.querySelectorAll(".scan-zoom-container");

  containers.forEach((container) => {
  const img = container.querySelector("img");

  let isZooming = false;
  let scale = 1;
  let targetScale = 1;
  let x = 0, y = 0;
  let startTime;
  let duration = 300; // Transition duration in milliseconds (adjustable)
  let animationFrameId;
  let isZoomedIn = false; // Track whether the image is zoomed in or not

  // Default sizes for the image (small image when not zoomed)
  const defaultSizes = "100px";

  // High-res sizes (large image when zoomed)
  const highResSizes = "3840px";

  // Set the default sizes initially
  img.sizes = defaultSizes;

  // Cubic bezier function for (.17, .67, .83, .67)
  function cubicBezier(t, p0, p1, p2, p3) {
    const u = 1 - t;
    return (3 * u * u * t * p1) + (3 * u * t * t * p2) + (t * t * t * p3);
  }

  // Function to apply cubic-bezier(.17, .67, .83, .67) easing
  function applyCubicBezierEaseOut(t) {
    return cubicBezier(t, 0.17, 0.67, 0.83, 0.67);
  }

  // Click event to toggle zoom
  container.addEventListener("click", (e) => {
    if (isZoomedIn) {
      // If already zoomed in, click to unzoom
      targetScale = 1;
      img.sizes = defaultSizes; // Switch back to low-res
      img.classList.remove("zoomed-in");
      isZoomedIn = false;
    } else {
      // Zoom in on first click
      const rect = container.getBoundingClientRect();
      x = e.clientX - rect.left;
      y = e.clientY - rect.top;
      targetScale = 2.5; // Zoom scale factor
      img.sizes = highResSizes; // Use high-res image
      img.classList.add("zoomed-in");
      isZoomedIn = true;
    }

    if (!isZooming) {
      isZooming = true;
      startTime = null;
      requestAnimationFrame(animateZoom);
    }
  });

  // Mouse move event to track cursor when zoomed in
  container.addEventListener("mousemove", (e) => {
    if (isZoomedIn) {
      const rect = container.getBoundingClientRect();
      x = e.clientX - rect.left;
      y = e.clientY - rect.top;

      // Update the transform origin while zoomed
      img.style.transformOrigin = `${x}px ${y}px`;
    }
  });

  function animateZoom(timestamp) {
    if (!startTime) startTime = timestamp;

    // Calculate the progress of the animation based on the target duration
    const elapsed = timestamp - startTime;
    let progress = Math.min(elapsed / duration, 1); // Clamp progress between 0 and 1

    // Apply cubic bezier easing to the progress
    let easedProgress = applyCubicBezierEaseOut(progress);

    // Calculate new scale based on easing
    scale = scale + (targetScale - scale) * easedProgress;

    img.style.transform = `scale(${scale})`;

    // Continue animation if the progress is less than 1 (i.e., the animation hasn't completed)
    if (progress < 1) {
      animationFrameId = requestAnimationFrame(animateZoom);
    } else {
      scale = targetScale; // Ensure final scale matches target
      img.style.transform = `scale(${scale})`;
      isZooming = false;
    }
  }
  });
</script>

<script>
  import { createIcons, icons } from 'lucide';

  // Caution, this will import all the icons and bundle them.
  createIcons({ icons });

  // Recommended way, to include only the icons you need.
  import { createIcons, ChevronLeft, ChevronRight } from 'lucide';

  createIcons({
  icons: {
    ChevronLeft,
    ChevronRight
  }
  });
</script>

<script>
  const swiper = document.querySelector("#main-swiper")
  const nextButton = document.querySelector("#next-slide")
  const prevButton = document.querySelector("#prev-slide")

  const swiperParams = {
    slidesPerView: 1,
    spaceBetween:128,
    injectStyles: [
      `
      .swiper {
       overflow: visible;
      }
      `,
    ],
  };

  Object.assign(swiper, swiperParams);
  swiper.initialize();
  nextButton.addEventListener("click", ()=>swiper.swiper.slideNext());
  prevButton.addEventListener("click", ()=>swiper.swiper.slidePrev())
</script>


{% schema %}
  {
    "name": "Sample scan",
    "tag": "section",
    "class": "section",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "select",
        "id": "content_alignment",
        "options": [
          {
            "value": "left",
            "label": "t:sections.rich-text.settings.content_alignment.options__1.label"
          },
          {
            "value": "center",
            "label": "t:sections.rich-text.settings.content_alignment.options__2.label"
          },
          {
            "value": "right",
            "label": "t:sections.rich-text.settings.content_alignment.options__3.label"
          }
        ],
        "default": "center",
        "label": "t:sections.rich-text.settings.content_alignment.label"
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      },
      {
        "type": "range",
        "id": "content_height",
        "min": 0,
        "max": 1000,
        "step": 50,
        "unit": "px",
        "label": "Content height",
        "default": 400
      }
    ],
    "blocks": [
      {
        "type": "Image",
        "name": "image",
        "limit": 3,
        "settings": [
          {
            "type": "image_picker",
            "id": "sample_scan_image",
            "label": "Sample scan image"
          },
          {
            "type": "image_picker",
            "id": "sample_scan_negative",
            "label": "Sample scan negative"
          },
          {
            "type": "text",
            "id": "camera",
            "label": "Camera"
          },
          {
            "type": "text",
            "id": "lens",
            "label": "Lens"
          },
          {
            "type": "text",
            "id": "light_source",
            "label": "Light source"
          },
          {
            "type": "text",
            "id": "converted_with",
            "label": "Converted with"
          },
          {
            "type": "url",
            "id": "raw_download_url",
            "label": "Raw download URL"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Sample scan",
        "settings": {}
      }
    ]
  }
{% endschema %}