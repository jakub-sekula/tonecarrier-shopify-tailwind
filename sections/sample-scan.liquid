{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
  assign image1 = section.settings.sample_scan_1
  assign image2 = section.settings.sample_scan_2
  assign image3 = section.settings.sample_scan_3
-%}

<div class="isolate{% unless section.settings.full_width %} page-width{% endunless %} section-{{ section.id }}-padding">
  {{ section.settings.title }}
  <swiper-container
    id="main-swiper"
    thumbs-swiper="#thumbs-swiper"
    css-mode="true">
    {%- if image1 != null -%}
      <swiper-slide>
        <div class="scan-zoom-container tw-overflow-hidden tw-w-full tw-aspect-[3/2]">
          <img
            srcset="{{ image1 | image_url: width: 800 }} 1x, {{ image1 | image_url: width: 3840 }} 4x"
            sizes="100px"
            class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
        </div>
      </swiper-slide>
    {%- endif -%}
    {%- if image2 != null -%}
      <swiper-slide lazy="true">
        <div class="scan-zoom-container tw-overflow-hidden tw-w-full tw-aspect-[3/2]">
          <img
            srcset="{{ image2 | image_url: width: 800 }} 1x, {{ image2 | image_url: width: 3840 }} 4x"
            sizes="100px"
            loading="lazy"
            class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
        </div>
      </swiper-slide>
    {%- endif -%}
    {%- if image3 != null -%}
      <swiper-slide lazy="true">
        <div class="scan-zoom-container tw-overflow-hidden tw-w-full tw-aspect-[3/2]">
          <img
            srcset="{{ image3 | image_url: width: 800 }} 1x, {{ image3 | image_url: width: 3840 }} 4x"
            sizes="100px"
            loading="lazy"
            class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
        </div>
      </swiper-slide>
    {%- endif -%}
  </swiper-container>
  <swiper-container
    id="thumbs-swiper"
    space-between="10"
    slides-per-view="4"
    free-mode="true"
    watch-slides-progress="true"
    css-mode="true">
    {%- if image1 != null -%}
      <swiper-slide>
        <img srcset="{{ image1 | image_url: width: 100 }} 1x" class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
      </swiper-slide>
    {%- endif -%}
    {%- if image2 != null -%}
      <swiper-slide>
        <img srcset="{{ image2  | image_url: width: 100 }} 1x" class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
      </swiper-slide>
    {%- endif -%}
    {%- if image3 != null -%}
      <swiper-slide>
        <img srcset="{{ image3 | image_url: width: 100 }} 1x" class="tw-origin-center tw-object-cover tw-w-full tw-h-full" />
      </swiper-slide>
    {%- endif -%}
  </swiper-container>
</div>

<style>
  .scan-zoom-container > img {
    max-width: 100%;
    cursor: zoom-in
  }

  .scan-zoom-container > img.zoomed-in {
    cursor: zoom-out
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js"></script>

<script>
  const containers = document.querySelectorAll(".scan-zoom-container");

  containers.forEach((container) => {
    const img = container.querySelector("img");

    let isZooming = false;
    let scale = 1;
    let targetScale = 1;
    let x = 0, y = 0;
    let startTime;
    let duration = 150; // Transition duration in milliseconds (adjustable)
    let animationFrameId;
    let isZoomedIn = false; // Track whether the image is zoomed in or not

    // Default sizes for the image (small image when not zoomed)
    const defaultSizes = "100px";

    // High-res sizes (large image when zoomed)
    const highResSizes = "3840px";

    // Set the default sizes initially
    img.sizes = defaultSizes;

    // Cubic bezier function for (.17, .67, .83, .67)
    function cubicBezier(t, p0, p1, p2, p3) {
      const u = 1 - t;
      return (3 * u * u * t * p1) + (3 * u * t * t * p2) + (t * t * t * p3);
    }

    // Function to apply cubic-bezier(.17, .67, .83, .67) easing
    function applyCubicBezierEaseOut(t) {
      return cubicBezier(t, 0.17, 0.67, 0.83, 0.67);
    }

    // Click event to toggle zoom
    container.addEventListener("click", (e) => {
      if (isZoomedIn) {
        // If already zoomed in, click to unzoom
        targetScale = 1;
        img.sizes = defaultSizes; // Switch back to low-res
        img.classList.remove("zoomed-in");
        isZoomedIn = false;
      } else {
        // Zoom in on first click
        const rect = container.getBoundingClientRect();
        x = e.clientX - rect.left;
        y = e.clientY - rect.top;
        targetScale = 2.5; // Zoom scale factor
        img.sizes = highResSizes; // Use high-res image
        img.classList.add("zoomed-in");
        isZoomedIn = true;
      }

      if (!isZooming) {
        isZooming = true;
        startTime = null;
        requestAnimationFrame(animateZoom);
      }
    });

    // Mouse move event to track cursor when zoomed in
    container.addEventListener("mousemove", (e) => {
      if (isZoomedIn) {
        const rect = container.getBoundingClientRect();
        x = e.clientX - rect.left;
        y = e.clientY - rect.top;

        // Update the transform origin while zoomed
        img.style.transformOrigin = `${x}px ${y}px`;
      }
    });

    function animateZoom(timestamp) {
      if (!startTime) startTime = timestamp;

      // Calculate the progress of the animation based on the target duration
      const elapsed = timestamp - startTime;
      let progress = Math.min(elapsed / duration, 1); // Clamp progress between 0 and 1

      // Apply cubic bezier easing to the progress
      let easedProgress = applyCubicBezierEaseOut(progress);

      // Calculate new scale based on easing
      scale = scale + (targetScale - scale) * easedProgress;

      img.style.transform = `scale(${scale})`;

      // Continue animation if the progress is less than 1 (i.e., the animation hasn't completed)
      if (progress < 1) {
        animationFrameId = requestAnimationFrame(animateZoom);
      } else {
        scale = targetScale; // Ensure final scale matches target
        img.style.transform = `scale(${scale})`;
        isZooming = false;
      }
    }
  });
</script>


{% schema %}
  {
    "name": "Sample scan",
    "tag": "section",
    "class": "section",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "text",
        "id": "title",
        "default": "Title",
        "label": "Scan sample title"
      },

      {
        "type": "image_picker",
        "id": "sample_scan_1",
        "label": "Sample scan 1"
      },
      {
        "type": "image_picker",
        "id": "sample_scan_2",
        "label": "Sample scan 2"
      },
      {
        "type": "image_picker",
        "id": "sample_scan_3",
        "label": "Sample scan 3"
      },
      {
        "type": "text",
        "id": "description",
        "label": "Sample scan description",
        "info": "something something"
      },

      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ],
    "presets": [
      {
        "name": "Sample scan",
        "settings": {
          "title": "gowno"
        }
      }
    ]
  }
{% endschema %}